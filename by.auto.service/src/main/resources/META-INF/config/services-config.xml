<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jms="http://www.springframework.org/schema/integration/jms"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:integration="http://www.springframework.org/schema/integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/integration
			http://www.springframework.org/schema/integration/spring-integration.xsd
			http://www.springframework.org/schema/integration/jms
			http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd">

    <context:property-placeholder order="1"
                                  properties-ref="servicesProperties"
                                  ignore-resource-not-found="true"
                                  ignore-unresolvable="true" system-properties-mode="NEVER"/>

    <bean id="servicesProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="localOverride" value="false"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:/META-INF/config/business-layer.properties</value>
                <value>classpath:/META-INF/config/services.properties</value>
                <value>classpath:/META-INF/config/services.override.properties</value>
                <value>file:${servicesoverrides:none}</value>
            </list>
        </property>
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.hostname}"/>
        <property name="port" value="${mail.port}"/>
        <property name="username" value="${mail.user}"/>
        <property name="password" value="${mail.password}"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">${mail.transport.protocol}</prop>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
                <prop key="mail.debug">false</prop>
            </props>
        </property>
    </bean>

    <bean id="freemarkerConfig" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="classpath:/META-INF/config/templates/"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <bean id="fileStorage" class="by.auto.service.data.S3FileStorage">
        <constructor-arg value="${s3.accessKey}"/>
        <constructor-arg value="${s3.secretKey}"/>
        <constructor-arg value="${s3.bucketName}"/>
    </bean>

    <bean id="templateMessageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="basenames">
            <list>
                <value>classpath:/META-INF/config/messages/templateMessages</value>
            </list>
        </property>
        <property name="cacheSeconds" value="0"/>
    </bean>

    <!-- jms integration -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <property name="targetConnectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL" value="${broker.url}"/>
            </bean>
        </property>
        <property name="sessionCacheSize" value="10"/>
        <property name="cacheProducers" value="false"/>
    </bean>

    <bean id="emailQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="queue.email"/>
    </bean>

    <bean id="deadQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="ActiveMQ.DLQ"/>
    </bean>

    <integration:channel id="emailOutChannel"/>
    <jms:outbound-channel-adapter id="jmsout" channel="emailOutChannel" destination="emailQueue"/>


    <!--<integration:channel id="deadEmailChannel"/>-->
    <!--<jms:message-driven-channel-adapter id="jmsInDead"-->
    <!--destination="deadQueue"-->
    <!--channel="deadEmailChannel" />-->
    <!-- end jms integration -->


    <beans profile="!test">
        <context:component-scan base-package="by.auto.service"/>
    </beans>

    <beans profile="!batch">
        <jms:message-driven-channel-adapter id="jmsIn"
                                            destination="emailQueue"
                                            acknowledge="client"
                                            channel="emailChannel" />

        <integration:channel id="emailChannel"/>

        <integration:channel id="queueChannel">
            <integration:queue />
        </integration:channel>

        <integration:service-activator input-channel="emailChannel" ref="jmsMessageListener" method="onMessage" output-channel="queueChannel"/>
        <!--<integration:service-activator input-channel="deadEmailChannel" ref="jmsMessageListener" method="onMessage" output-channel="queueChannel"/>-->
        <context:component-scan base-package="by.auto.service"/>
    </beans>

</beans>
