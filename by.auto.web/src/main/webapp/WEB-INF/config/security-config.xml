<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://www.springframework.org/schema/security"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder properties-ref="webProperties"/>

    <http pattern="/oauth/token"
            create-session="stateless"
            authentication-manager-ref="clientAuthenticationManager"
            entry-point-ref="oauthAuthenticationEntryPoint"
            xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
    </http>

    <!-- Bypassing security for static resources -->
    <http pattern="/resources/**" security="none"/>
    <http pattern="/BingSiteAuth.xml" security="none"/>


    <http use-expressions="true"
          auto-config="false"
          entry-point-ref="loginUrlAuthenticationEntryPoint">
        <form-login login-page="/signin"
                    login-processing-url="/signin/authenticate"
                    authentication-success-handler-ref="accountAuthenticationSuccessHandler"
                    authentication-failure-url="/signin?error=1"/>
        <remember-me key="autoRememberKey" services-ref="rememberMeServices"/>
        <logout logout-url="/signout"
                delete-cookies="JSESSIONID"
                success-handler-ref="accountLogoutSuccessHandler"/>
        <!-- Authentication -->
        <intercept-url pattern="#{T(by.auto.web.routes.Routes).HELP}" access="permitAll"/>
        <intercept-url pattern="#{T(by.auto.web.routes.Routes).SIGNIN}/**" access="permitAll"/>
        <intercept-url pattern="#{T(by.auto.web.routes.Routes$Signup).SIGNUP}/**" access="isAnonymous()"/>
        <intercept-url pattern="#{T(by.auto.web.routes.Routes$Profile).FORGOT_PASSWORD}/**" access="permitAll"/>

        <intercept-url pattern="/api/signup" access="permitAll"/>
        <intercept-url pattern="/api/**" access="isAuthenticated()"/>

        <!-- Public -->
        <intercept-url pattern="/" access="permitAll"/>
        <intercept-url pattern="#{T(by.auto.web.routes.Routes).ERROR_404}" access="permitAll"/>
        <intercept-url pattern="/robots.txt" access="permitAll"/>
        <intercept-url pattern="/sitemap.xml" access="permitAll"/>
        <intercept-url pattern="/sitemap-*.xml" access="permitAll"/>

        <!-- Everything else -->
        <intercept-url pattern="#{T(by.auto.web.routes.Routes$Profile).PROFILE}/**" access="isAuthenticated()"/>

        <!--
            The access to other resources is defined by build system (maven).
            The permitAll sets for Production server (amazon, amazon-deploy profiles) to allow to get 404 without authentication.
            The denyAll sets for Development server (default profile for maven (dev)) to prevent implicit url pattern (/**) for new functionality.

        -->
        <!--<intercept-url pattern="/**" access="${default.url.security.access}"  />-->

        <!-- Filters -->
        <custom-filter ref="apiTimeoutRedirectFilter" after="EXCEPTION_TRANSLATION_FILTER"/>

        <session-management>
            <!-- TODO: Configure expired-url -->
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
        </session-management>

    </http>

    <beans:bean id="apiTimeoutRedirectFilter" class="by.auto.web.security.ApiTimeoutRedirectFilter">
        <beans:property name="customSessionExpiredErrorCode" value="403"/>
    </beans:bean>

    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="usernamePasswordAuthenticationProvider"/>
    </authentication-manager>

    <beans:bean id="accountLogoutSuccessHandler"
                class="by.auto.web.security.AccountLogoutSuccessHandler"/>

    <beans:bean id="accountAuthenticationSuccessHandler"
                class="by.auto.web.security.AccountAuthenticationSuccessHandler"/>

    <beans:bean id="loginUrlAuthenticationEntryPoint"
                class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:property name="loginFormUrl" value="/signin"/>
    </beans:bean>

    <global-method-security pre-post-annotations="enabled">
        <expression-handler ref="expressionHandler"/>
    </global-method-security>
    <beans:bean id="expressionHandler"
                class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
        <beans:property name="permissionEvaluator" ref="permissionEvaluator"/>
    </beans:bean>
    <beans:bean id="permissionEvaluator" class="org.springframework.aop.framework.ProxyFactoryBean">
        <beans:property name="targetSource">
            <beans:bean class="org.springframework.aop.target.LazyInitTargetSource">
                <beans:property name="targetBeanName" value="defaultPermissionEvaluator"/>
            </beans:bean>
        </beans:property>
        <beans:property name="proxyInterfaces" value="org.springframework.security.access.PermissionEvaluator"/>
    </beans:bean>
    <beans:bean id="defaultPermissionEvaluator" class="by.auto.web.security.AutoPermissionEvaluator"/>

    <beans:bean id="customUserDetailsService" class="by.auto.web.security.CustomUserDetailsService"/>

    <beans:bean id="rememberMeFilter" class=
            "org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
        <beans:property name="rememberMeServices" ref="rememberMeServices"/>
        <beans:property name="authenticationManager" ref="authenticationManager"/>
    </beans:bean>

    <beans:bean id="rememberMeServices" class=
            "by.auto.web.security.CustomTokenBasedRememberMeServices">
        <beans:property name="userDetailsService" ref="customUserDetailsService"/>
        <beans:property name="key" value="autoRememberKey"/>
        <beans:property name="tokenValiditySeconds" value="2592000"/>
        <!-- 1 month -->
    </beans:bean>

    <beans:bean id="rememberMeAuthenticationProvider" class=
            "org.springframework.security.authentication.RememberMeAuthenticationProvider">
        <beans:property name="key" value="autoRememberKey"/>
    </beans:bean>

    <!-- For S2OAuth endpoints -->
    <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>

    <beans:bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetails" />
    </beans:bean>

    <beans:bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="autoApi" />
    </beans:bean>

    <beans:import resource="security-oauth-provider.xml" />
</beans:beans>
